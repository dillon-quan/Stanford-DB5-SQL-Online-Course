
SQL Movie-Rating Query Exercises

Tables:

Movie ( mID, title, year, director ) 
English: There is a movie with ID number mID, a title, a release year, and a director. 

Reviewer ( rID, name ) 
English: The reviewer with ID number rID has a certain name. 

Rating ( rID, mID, stars, ratingDate ) 
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate. 

1. Find the titles of all movies directed by Steven Spielberg. 

   SELECT title
   FROM Movie
   WHERE director = 'Steven Spielberg'

2. Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. 

   SELECT DISTINCT m.year
   FROM Movie AS m
   JOIN Rating AS r
   ON m.mID = r.mID
   WHERE r.stars >= 4
   ORDER BY m.year

3. Find the titles of all movies that have no ratings. 

   SELECT title 
   FROM Movie
   WHERE Movie.mID NOT IN (SELECT mID FROM Rating)

4. Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value    for the date. 

   SELECT name 
   FROM Reviewer 
   WHERE rID IN (SELECT rID FROM Rating WHERE ratingDate IS null)

5. Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate.        Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars.

   SELECT Reviewer.name,Movie.title, Rating.stars, Rating.ratingDate
   FROM Rating
   JOIN Movie, Reviewer
   ON Rating.rID = Reviewer.rID AND Rating.mID = Movie.mID
   ORDER BY 1,2,3

6. For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the      reviewer's name and the title of the movie. 

   SELECT Reviewer.name, Movie.title
   FROM Reviewer, Movie,
   (SELECT R1.rID, R1.mID 
   FROM Rating R1, Rating R2 
   WHERE R1.rID=R2.rID AND R1.mID=R2.mID AND R2.ratingDate>R1.ratingDate
   AND R2.stars > R1.stars) AS comp
   WHERE Reviewer.rID = comp.rID AND Movie.mID = comp.mID

7. For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title      and number of stars. Sort by movie title. 

   SELECT Movie.title, MAX(stars)   
   FROM Rating
   JOIN Movie
   ON Rating.mID = Movie.mID
   GROUP BY 1
   ORDER BY 1

8. For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given    to that movie. Sort by rating spread from highest to lowest, then by movie title. 

   SELECT Movie.title, MAX(stars) - MIN(stars) AS spread  
   FROM Rating
   JOIN Movie
   ON Rating.mID = Movie.mID
   GROUP BY 1
   ORDER BY 2 DESC, 1

9. Find the difference between the average rating of movies released before 1980 and the average rating of movies released        after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before    1980 and movies after. Don't just calculate the overall average rating before and after 1980.) 

   SELECT MAX(total_avg) - MIN(total_avg)
   FROM (SELECT CASE WHEN sub.before_after = 'yes' THEN AVG(sub.avg_stars) ELSE AVG(sub.avg_stars) END AS total_avg
   FROM (SELECT Movie.title, AVG(Rating.stars) as avg_stars,Movie.year,
   CASE WHEN year > 1980 THEN 'yes' ELSE 'no' END as before_after
   FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY 1) sub
   GROUP BY before_after)
