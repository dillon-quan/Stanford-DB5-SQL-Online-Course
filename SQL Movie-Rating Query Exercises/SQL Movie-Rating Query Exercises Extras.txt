SQL Movie-Rating Query Exercises Extras

Tables:

Movie ( mID, title, year, director ) 
English: There is a movie with ID number mID, a title, a release year, and a director. 

Reviewer ( rID, name ) 
English: The reviewer with ID number rID has a certain name. 

Rating ( rID, mID, stars, ratingDate ) 
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate. 

1. Find the names of all reviewers who rated Gone with the Wind.

   SELECT Reviewer.name
   FROM Reviewer
   WHERE Reviewer.rID IN (SELECT Rating.rID
   FROM Rating
   WHERE Rating.mID = 101)

2. For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and        number of stars. 

   SELECT Reviewer.name, Movie.title, Rating.stars
   FROM Reviewer, Movie, Rating,
   (SELECT rID,mID,stars
   FROM Rating WHERE Rating.rID IN 
   (SELECT distinct rID FROM Reviewer, Movie WHERE Reviewer.name = Movie.director)) as comp
   WHERE Reviewer.rID = comp.rID and Movie.mID = comp.mID and Rating.stars = comp.stars
   GROUP BY 1

3. Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the          reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) 

    SELECT name FROM Reviewer
    UNION
    SELECT title FROM Movie

4. Find the titles of all movies not reviewed by Chris Jackson. 

    SELECT title FROM Movie 
    WHERE mID NOT IN (SELECT mID FROM Rating WHERE rID = 205)

5. For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers.      Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the        names in the pair in alphabetical order.

    SELECT DISTINCT r1.name AS n1, r2.name AS n2 FROM
    (SELECT r1.rID AS id1, r2.rID AS id2 FROM Rating r1, Rating r2 
    WHERE r1.rID > r2.rID AND r1.mID = r2.mID) AS t, Reviewer r1, Reviewer r2
    WHERE r1.rID = t.id1 AND r2.rID = t.id2 
    ORDER BY 1,2

6. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and        number of stars. 

    SELECT Reviewer.name, Movie.title, comp.stars
    FROM Reviewer, Movie, Rating,
    (SELECT rID, mID, stars
    FROM Rating 
    WHERE stars IS(SELECT MIN(stars) FROM Rating)) as comp
    WHERE comp.rID = Reviewer.rID and Movie.mID = comp.mID and Rating.stars = comp.stars
    GROUP BY 2

7. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average        rating, list them in alphabetical order. 

    SELECT Movie.title, AVG(Rating.stars) 
    FROM Rating
    JOIN Movie
    ON Movie.mID = Rating.mID
    GROUP BY 1
    ORDER BY 2 DESC, 1

8. Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query      without HAVING or without COUNT.) 

   SELECT name FROM Reviewer
   JOIN (SELECT rID,  CASE WHEN COUNT(rID) >= 3 THEN 'yes' END AS counter
   FROM Rating GROUP BY 1) as comp
   ON Reviewer.rID = comp.rID
   WHERE comp.counter = 'yes'

9. Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them,        along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both      with and without COUNT.) 

   SELECT title, Movie.director
   FROM  Movie JOIN (SELECT director,
   CASE WHEN COUNT(director) >= 2 THEN 'yes' ELSE 'no' END AS counter 
   FROM Movie GROUP BY 1) yes
   ON Movie.director = yes.director
   WHERE yes.counter = 'yes'
   GROUP BY 1
   ORDER BY 2

10. Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more     difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then         choosing the movie(s) with that average rating.) 

    SELECT m.title, AVG(r.stars) AS avg_r
    FROM Movie m, Rating r
    WHERE m.mID = r.mID
    GROUP BY 1
    HAVING avg_r = 
    (SELECT MAX(rate) FROM (SELECT m.title, AVG(r.stars) AS rate FROM Movie m, Rating r
    WHERE m.mID = r.mID
    GROUP BY 1)

11. Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be       more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then     choosing the movie(s) with that average rating.) 

    SELECT m.title, AVG(r.stars) AS avg_r
    FROM Movie m, Rating r
    WHERE m.mID = r.mID
    GROUP BY 1
    HAVING avg_r = 
    (SELECT MIN(rate) FROM (SELECT m.title, AVG(r.stars) AS rate FROM Movie m, Rating r
    WHERE m.mID = r.mID
    GROUP BY 1)

12. For each director, return the director's name together with the title(s) of the movie(s) they directed that received the       highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. 

    SELECT director, title, R.star
    FROM Movie JOIN (SELECT mID, MAX(stars) as star FROM Rating GROUP BY mID) R
    ON Movie.mID = R.mID
    WHERE Movie.director IS NOT NULL
    GROUP BY 1
    ORDER BY 1
