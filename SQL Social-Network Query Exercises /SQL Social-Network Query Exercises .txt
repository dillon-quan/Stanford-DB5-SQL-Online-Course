SQL Social-Network Query Exercises

Tables:

Highschooler ( ID, name, grade ) 
English: There is a high school student with unique ID and a given first name in a certain grade. 

Friend ( ID1, ID2 ) 
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123). 

Likes ( ID1, ID2 ) 
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, there is no guarantee that (456, 123) is also present. 

1. Find the names of all students who are friends with someone named Gabriel. 

   SELECT h.name FROM Highschooler h
   JOIN (SELECT ID2 FROM Friend WHERE ID1 IN (SELECT ID FROM Highschooler WHERE name = 'Gabriel')) AS temp
   ON h.ID = temp.ID2

2. For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the    name and grade of the student they like. 

   SELECT t1.name, t1.grade, t2.name, t2.grade
   FROM (SELECT * FROM Highschooler h, Likes l WHERE h.ID = l.ID1) AS t1
   JOIN (SELECT * FROM Highschooler h, Likes l WHERE h.ID = l.ID2) AS t2
   ON t1.ID1 = t2.ID1 AND t1.ID2 = t2.ID2 AND t1.grade - t2.grade >=2

3. For every pair of students who both like each other, return the name and grade of both students. Include each pair only        once, with the two names in alphabetical order. 

   SELECT t1.name, t1.grade, t2.name, t2.grade
   FROM (SELECT * FROM Highschooler h, Likes l WHERE h.ID = l.ID1) AS t1
   JOIN (SELECT * FROM Highschooler h, Likes l WHERE h.ID = l.ID1) AS t2
   ON t1.ID1 = t2.ID2 AND t1.ID2 = t2.ID1 AND t1.name < t2.name
   ORDER BY 1

4. Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and        grades. Sort by grade, then by name within each grade. 

   SELECT name, grade FROM Highschooler
   WHERE ID NOT IN (SELECT ID1 FROM Likes UNION SELECT ID2 FROM Likes)
   ORDER BY 2, 1

5. For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not        appear as an ID1 in the Likes table), return A and B's names and grades. 

   SELECT h1.name, h1.grade, h2.name, h2.grade
   FROM Highschooler h1, Highschooler h2,Likes l
   ON h1.ID = l.ID1 AND h2.ID = l.ID2 AND l.ID2 NOT IN (SELECT ID1 FROM Likes)

6. Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name    within each grade. 

   SELECT name, grade
   FROM Highschooler
   WHERE ID NOT IN
   (SELECT h1.ID FROM Highschooler h1, Highschooler h2, Friend f 
   WHERE h1.ID = f.ID1 AND h2.ID = f.ID2 and h1.grade <> h2.grade)
   ORDER BY 2, 1

7. For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can        introduce them!). For all such trios, return the name and grade of A, B, and C. 

   SELECT DISTINCT h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade
   FROM Highschooler h1, Highschooler h2, Highschooler h3, Likes l, Friend f1, Friend f2, Friend f3
   WHERE h1.ID = l.ID1 AND h2.ID = l.ID2 AND f1.ID1 = h1.ID AND f1.ID2 = h3.ID
   AND h3.ID = f2.ID1 AND h2.ID = f2.ID2 AND h1.ID = f3.ID1 AND h2.ID NOT IN 
   (SELECT ID2 FROM Friend WHERE h1.ID = Friend.ID1)

8. Find the difference between the number of students in the school and the number of different first names. 

   SELECT COUNT(*) - COUNT(DISTINCT name) FROM Highschooler

9. Find the name and grade of all students who are liked by more than one other student.

   SELECT name, grade FROM Highschooler WHERE ID IN
   (SELECT ID2 FROM Likes GROUP BY ID2 HAVING COUNT(ID2) > 1) 
